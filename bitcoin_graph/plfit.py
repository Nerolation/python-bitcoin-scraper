# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _plfit_python
else:
    import _plfit_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


PLFIT_VERSION_MAJOR = _plfit_python.PLFIT_VERSION_MAJOR
PLFIT_VERSION_MINOR = _plfit_python.PLFIT_VERSION_MINOR
PLFIT_VERSION_PATCH = _plfit_python.PLFIT_VERSION_PATCH
PLFIT_VERSION_STRING = _plfit_python.PLFIT_VERSION_STRING
PLFIT_LINEAR_ONLY = _plfit_python.PLFIT_LINEAR_ONLY
PLFIT_STRATIFIED_SAMPLING = _plfit_python.PLFIT_STRATIFIED_SAMPLING
PLFIT_GSS_OR_LINEAR = _plfit_python.PLFIT_GSS_OR_LINEAR
PLFIT_DEFAULT_CONTINUOUS_METHOD = _plfit_python.PLFIT_DEFAULT_CONTINUOUS_METHOD
PLFIT_LBFGS = _plfit_python.PLFIT_LBFGS
PLFIT_LINEAR_SCAN = _plfit_python.PLFIT_LINEAR_SCAN
PLFIT_PRETEND_CONTINUOUS = _plfit_python.PLFIT_PRETEND_CONTINUOUS
PLFIT_DEFAULT_DISCRETE_METHOD = _plfit_python.PLFIT_DEFAULT_DISCRETE_METHOD
PLFIT_P_VALUE_SKIP = _plfit_python.PLFIT_P_VALUE_SKIP
PLFIT_P_VALUE_APPROXIMATE = _plfit_python.PLFIT_P_VALUE_APPROXIMATE
PLFIT_P_VALUE_EXACT = _plfit_python.PLFIT_P_VALUE_EXACT
PLFIT_DEFAULT_P_VALUE_METHOD = _plfit_python.PLFIT_DEFAULT_P_VALUE_METHOD
class plfit_result_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alpha = property(_plfit_python.plfit_result_t_alpha_get, _plfit_python.plfit_result_t_alpha_set)
    xmin = property(_plfit_python.plfit_result_t_xmin_get, _plfit_python.plfit_result_t_xmin_set)
    L = property(_plfit_python.plfit_result_t_L_get, _plfit_python.plfit_result_t_L_set)
    D = property(_plfit_python.plfit_result_t_D_get, _plfit_python.plfit_result_t_D_set)
    p = property(_plfit_python.plfit_result_t_p_get, _plfit_python.plfit_result_t_p_set)

    def __str__(self):
        return _plfit_python.plfit_result_t___str__(self)

    def __init__(self):
        _plfit_python.plfit_result_t_swiginit(self, _plfit_python.new_plfit_result_t())
    __swig_destroy__ = _plfit_python.delete_plfit_result_t

# Register plfit_result_t in _plfit_python:
_plfit_python.plfit_result_t_swigregister(plfit_result_t)

class plfit_continuous_options_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    finite_size_correction = property(_plfit_python.plfit_continuous_options_t_finite_size_correction_get, _plfit_python.plfit_continuous_options_t_finite_size_correction_set)
    xmin_method = property(_plfit_python.plfit_continuous_options_t_xmin_method_get, _plfit_python.plfit_continuous_options_t_xmin_method_set)
    p_value_method = property(_plfit_python.plfit_continuous_options_t_p_value_method_get, _plfit_python.plfit_continuous_options_t_p_value_method_set)
    p_value_precision = property(_plfit_python.plfit_continuous_options_t_p_value_precision_get, _plfit_python.plfit_continuous_options_t_p_value_precision_set)
    rng = property(_plfit_python.plfit_continuous_options_t_rng_get, _plfit_python.plfit_continuous_options_t_rng_set)

    def __init__(self):
        _plfit_python.plfit_continuous_options_t_swiginit(self, _plfit_python.new_plfit_continuous_options_t())

    def __str__(self):
        return _plfit_python.plfit_continuous_options_t___str__(self)
    __swig_destroy__ = _plfit_python.delete_plfit_continuous_options_t

# Register plfit_continuous_options_t in _plfit_python:
_plfit_python.plfit_continuous_options_t_swigregister(plfit_continuous_options_t)

class plfit_discrete_options_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    finite_size_correction = property(_plfit_python.plfit_discrete_options_t_finite_size_correction_get, _plfit_python.plfit_discrete_options_t_finite_size_correction_set)
    alpha_method = property(_plfit_python.plfit_discrete_options_t_alpha_method_get, _plfit_python.plfit_discrete_options_t_alpha_method_set)
    alpha = property(_plfit_python.plfit_discrete_options_t_alpha_get)
    p_value_method = property(_plfit_python.plfit_discrete_options_t_p_value_method_get, _plfit_python.plfit_discrete_options_t_p_value_method_set)
    p_value_precision = property(_plfit_python.plfit_discrete_options_t_p_value_precision_get, _plfit_python.plfit_discrete_options_t_p_value_precision_set)
    rng = property(_plfit_python.plfit_discrete_options_t_rng_get, _plfit_python.plfit_discrete_options_t_rng_set)

    def __init__(self):
        _plfit_python.plfit_discrete_options_t_swiginit(self, _plfit_python.new_plfit_discrete_options_t())

    def __str__(self):
        return _plfit_python.plfit_discrete_options_t___str__(self)
    __swig_destroy__ = _plfit_python.delete_plfit_discrete_options_t

# Register plfit_discrete_options_t in _plfit_python:
_plfit_python.plfit_discrete_options_t_swigregister(plfit_discrete_options_t)

class _plfit_discrete_options_t_alpha(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min = property(_plfit_python._plfit_discrete_options_t_alpha_min_get, _plfit_python._plfit_discrete_options_t_alpha_min_set)
    max = property(_plfit_python._plfit_discrete_options_t_alpha_max_get, _plfit_python._plfit_discrete_options_t_alpha_max_set)
    step = property(_plfit_python._plfit_discrete_options_t_alpha_step_get, _plfit_python._plfit_discrete_options_t_alpha_step_set)

    def __init__(self):
        _plfit_python._plfit_discrete_options_t_alpha_swiginit(self, _plfit_python.new__plfit_discrete_options_t_alpha())
    __swig_destroy__ = _plfit_python.delete__plfit_discrete_options_t_alpha

# Register _plfit_discrete_options_t_alpha in _plfit_python:
_plfit_python._plfit_discrete_options_t_alpha_swigregister(_plfit_discrete_options_t_alpha)


def plfit_log_likelihood_continuous(xs, alpha, xmin):
    return _plfit_python.plfit_log_likelihood_continuous(xs, alpha, xmin)

def plfit_estimate_alpha_continuous(xs, xmin, options=None):
    return _plfit_python.plfit_estimate_alpha_continuous(xs, xmin, options)

def plfit_continuous(xs, options=None):
    return _plfit_python.plfit_continuous(xs, options)

def plfit_estimate_alpha_discrete(xs, xmin, options=None):
    return _plfit_python.plfit_estimate_alpha_discrete(xs, xmin, options)

def plfit_log_likelihood_discrete(xs, alpha, xmin):
    return _plfit_python.plfit_log_likelihood_discrete(xs, alpha, xmin)

def plfit_discrete(xs, options=None):
    return _plfit_python.plfit_discrete(xs, options)

def plfit_resample_continuous(xs, alpha, xmin, num_samples, rng):
    return _plfit_python.plfit_resample_continuous(xs, alpha, xmin, num_samples, rng)

def plfit_resample_discrete(xs, alpha, xmin, num_samples, rng):
    return _plfit_python.plfit_resample_discrete(xs, alpha, xmin, num_samples, rng)

def plfit_calculate_p_value_continuous(xs, options, xmin_fixed):
    return _plfit_python.plfit_calculate_p_value_continuous(xs, options, xmin_fixed)

def plfit_calculate_p_value_discrete(xs, options, xmin_fixed):
    return _plfit_python.plfit_calculate_p_value_discrete(xs, options, xmin_fixed)

def plfit_moments(xs):
    return _plfit_python.plfit_moments(xs)

__version__ = PLFIT_VERSION_STRING



